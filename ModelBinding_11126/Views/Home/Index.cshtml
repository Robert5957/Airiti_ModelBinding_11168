
@{
    ViewBag.Title = "Index";

    // 顯示前端的作業題目
    string[] TitleArray = { "SimpleBinding", "ModelBindObj", "SimpleModelBindArray", "ModelBindingArray", "ModelBindingNestedObj", "ModelBindingArrayNestedObj", "SimpleBinding", "ModelBindingArrayNestedObj" };
}

@*輸入資料*@
<div class="background container-fluid" id="Main">
    <h3>輸入( object )</h3>
    <div class="content ObjInput col-lg-12" id="ObjInput">
        <p id="InputText" name="Obj"></p>
        <button class="btn btn-success normal" id="senddata">作業題: 格式送出</button>
    </div>
    <div class="contentPlus col-lg-12">
        <button class="btn btn-primary plus" id="otherdata">延伸題( 串接外部 JSON )</button>
        <button class="btn btn-primary plus" id="otherdataA">延伸題( 物件包 HTML Tag )</button>
        <div class="fileupload">
            <input type="file" name="fileBase" id="file" class="fileinput">
            <button class="btn btn-primary" id="Filedata">檔案上傳</button>
        </div>
        <div class="fileupload content" id="ReturnFile"></div>
        <div class="fileupload">
            <input type="file" name="docforImage" id="docforImage" class="fileinput" accept="image/*">
            <button class="btn btn-primary" id="Imgdata">圖片上傳</button>
        </div>
        <div class="fileupload content" id="ReturnImg"></div>
    </div>
</div>

@*顯示資料*@
@for (int i = 0; i < TitleArray.Length; i++)
{
    <div class="background container-fluid" id="Main">
        <h1>@TitleArray[i]</h1>
        <div class="JsonInfo col-lg-12"></div>
        <div class="InfoMain col-lg-12" id="ReturnContent@(i)"></div>
    </div>
}
@for (int i = 0; i < 2; i++)
{
    <div class="background container-fluid" id="Main">
        <div class="JsonInfo col-lg-12"></div>
        <div class="InfoMain col-lg-12" id="ReturnData@(i)"></div>
    </div>
}
@for (int i = 0; i < 2; i++)
{
    <div class="background container-fluid" id="Main">
        <div class="JsonInfo col-lg-12"></div>
        <div class="InfoMain col-lg-12" id="ReturnHTML@(i)"></div>
    </div>
}

@section scripts
{
    <script type="text/javascript">

        let ContentType = ['application/x-www-form-urlencoded', 'application/json; charset=utf-8'];

        // 作業題
        $("#senddata").click(function () {

            // 測試資料( SimpleModelBinding、ModelBinding )
            var TestDataA = { "Name": "Bob", "Age": 35 };
            var TestDataB = { "Name": "Nick", "Age": 20 };
            var TestDataC = { "Name": "Selina", "Age": 50 };
            var TestDataD = [{ "Name": "Mary", "Age": 10 }, { "Name": "Mark", "Age": 60 }];

            // 測試資料(當丟入的型別為字串時)
            var TestDataE = "Name=Jason&Age=45";
            var TestDataF = "data%5B0%5D%5BName%5D=Nelson&data%5B0%5D%5BAge%5D=60&data%5B0%5D%5BFriends%5D%5B0%5D%5BName%5D=Bob&data%5B0%5D%5BFriends%5D%5B0%5D%5BAge%5D=35&data%5B0%5D%5BFriends%5D%5B1%5D%5BName%5D=Nick&data%5B0%5D%5BFriends%5D%5B1%5D%5BAge%5D=20&data%5B0%5D%5BFriends%5D%5B2%5D%5BName%5D=Selina&data%5B0%5D%5BFriends%5D%5B2%5D%5BAge%5D=50&data%5B0%5D%5BFriends%5D%5B3%5D%5BFriends%5D%5B0%5D%5BName%5D=Mary&data%5B0%5D%5BFriends%5D%5B3%5D%5BFriends%5D%5B0%5D%5BAge%5D=10&data%5B0%5D%5BFriends%5D%5B3%5D%5BFriends%5D%5B1%5D%5BName%5D=Mark&data%5B0%5D%5BFriends%5D%5B3%5D%5BFriends%5D%5B1%5D%5BAge%5D=60";

            // 顯示前端輸入的資訊
            $("#InputText").text(JSON.stringify(TestDataA));

            // 測試資料( SimpleModelBindingArray、ModelBindingArray )
            let TestName = [];
            let TestAge = [];
            let TestArray = [TestDataA, TestDataB];
            TestArray.forEach(item => {
                TestName.push(item.Name);
                TestAge.push(item.Age);
            })
            let SimpleMBA = { "Name": TestName, "Age": TestAge };
            let ModelBA = { 'data': TestArray };

            // 測試資料( ModelBindingNestedObj、ModelBindingArrayNestedObj )
            let Friends = [TestDataA, TestDataB, TestDataC, { "Friends": TestDataD }];
            let ModelBNO = { "data": { "Name": "Nelson", "Age": 60, "Friends": Friends } };
            let MBArrayNO = { "data": [{ "Name": "Nelson", "Age": 60, "Friends": Friends }] };

            let QueryData = [TestDataA, TestDataA, SimpleMBA, ModelBA, ModelBNO, MBArrayNO, TestDataE, TestDataF];


            // 丟給 Ajax 處理(查詢的資料)
            AjaxtoQuery(QueryData);
        });
        // 檔案上傳
        $("#Filedata").click(function () {

            // 適用 HTML5 的 Broswer
            let fileBase = new FormData();

            // 取得 file 的資料
            fileBase.append("fileBase", $("#file")[0].files[0]);

            // 清空前端資料
            $(`#ReturnFile img`).remove();
            $(`#ReturnFile p`).remove();

            if (!fileBase.get("fileBase").size) {
                $(`#ReturnFile`).append(`<p>上傳失敗!沒有任何檔案`);
            }
            else {
                $.ajax({
                    url: "@Url.Action("SendFile", "Home")",
                    contentType: false,
                    enctype: 'multipart/form-data',
                    processData: false,
                    data: fileBase,
                    cache: false,
                    type: "POST",
                    // 可以另外設定 xhr 的參數(源自 XMLHttpRequest )。blob 為處理二進位的物件
                    xhrFields: { responseType:'blob' },
                    success: function (data) {
                        $(`#ReturnFile`).append(
                         // createobjectURL 可轉換物件內容為 URL，主要用於預覽或下載圖片等媒體資料
                         `<img src=${URL.createObjectURL(data)} width=100 alt=${fileBase.get("fileBase").name}>
                         <p>檔案大小:${fileBase.get("fileBase").size}</p>`);
                        $(`#Filedata`).html("上傳成功");
                        // 屬於靜態方法會占用記憶體，用完要釋放
                        URL.revokeObjectURL(data);
                    },
                    error: function (jqXHR, testStatus, errorThrown) {
                        alert(`Ajax 出錯`);
                        console.log("jqXHR 錯誤訊息內容:", jqXHR);
                        console.log("ErrorThrown 錯誤訊息內容:", errorThrown);
                    }
                });
            }
        });

        // 圖片以 bytes 型式上傳
        $("#Imgdata").click(function () {
            // 適用 HTML5 的 Broswer
            let docforImage = new FormData();
            docforImage.append("docforImage", $("#docforImage")[0].files[0]);
            console.log("資料", $("#docforImage")[0].files[0]);
            $(`#ReturnImg p`).remove();
            if (!docforImage.get("docforImage").size) {
                $(`#ReturnImg`).append(`<p>上傳失敗!沒有任何檔案`);
            }
            else {
                $.ajax({
                    url: "@Url.Action("SendByte", "Home")",
                    contentType: 'application/octet-stream',
                    processData: false,
                    data: docforImage,
                    cache: false,
                    type: "POST",
                    xhrFields: { responseType:'blob' },
                    success: function (data) {
                        console.log("URL", URL.createObjectURL(data));
                        $(`#ReturnImg`).append(
                            // createobjectURL 可轉換物件內容為 URL，主要用於預覽或下載圖片等媒體資料
                            `<p>檔案名稱:${docforImage.get("docforImage").name}</p>
                             <p>檔案大小:${docforImage.get("docforImage").size}</p>`);
                        $(`#Imgdata`).html("上傳成功");
                        var link = document.createElement("a");
                        link.href = URL.createObjectURL(data);
                 /*       link.click();*/
                        // 屬於靜態方法會占用記憶體，用完要釋放
                        URL.revokeObjectURL(data);
                    },
                    error: function (jqXHR, testStatus, errorThrown) {
                        alert(`Ajax 出錯`);
                        console.log("jqXHR 錯誤訊息內容:", jqXHR);
                        console.log("ErrorThrown 錯誤訊息內容:", errorThrown);
                    }
                });
            }
        });


        // 延伸題1
        $("#otherdata").click(function () {
            // 測試資料
            let TestData = {
                "contentType": "application/json; charset=utf-8",
                "isImage": false,
                "data": {
                    "XML_Head": {
                        "Listname": "1",
                        "Language": "C",
                        "Orgname": "397000000A",
                        "Updatetime": "2021/01/20 08:40:00",
                        "Infos": {
                            "Info": [
                                {
                                    "Id": "C1_397000000A_000230",
                                    "Status": "2",
                                    "Name": "田寮月世界",
                                    "Zone": "",
                                    "Toldescribe": "田寮「月世界」特殊景觀在地理學上稱為「惡地」，是由於地殼的「回春作用」，經年累月的經由雨水與河水強烈侵蝕，將泥沙堆積在泥岩上，地層變動後，泥沙更與泥岩混合再經由風化、沉積作用，形成今日地貌，僅適於耐旱、耐鹽的淺根植物（如：箭竹）、濱海植物生長。從田寮到旗山台28線沿路除了月世界景觀，還有大小不等的二十多個泥火山，常呈現間歇性的噴發現象，噴發的規模則視地底天然氣與泥漿的累積壓力而定，噴發後的泥流堆積地區。",
                                    "Description": "田寮「月世界」特殊景觀在地理學稱為「惡地」，經年累月由雨、河水侵蝕，將泥沙堆積在泥岩上，泥沙與泥岩混合經由風化形成。",
                                    "Tel": "886-7-6367036",
                                    "Add": "高雄市823田寮區崇德里月球路36號",
                                    "Zipcode": "823",
                                    "Travellinginfo": "無障礙交通：高鐵台南站 → 沙旗美月世界快線公車 → 月世界 → 旗山高鐵左營站 → 旗美快線公車 → 旗山 → 轉搭沙旗美月世界快線公車 → 月世界",
                                    "Opentime": "遊客中心：09:00–17:00月世界：全天候開放",
                                    "Gov": "397000000A",
                                    "Px": "120.38898",
                                    "Py": "22.88600"
                                },
                                {
                                    "Id": "C1_397000000A_000234",
                                    "Status": "2",
                                    "Name": "西子灣風景區",
                                    "Zone": "",
                                    "Toldescribe": "西子灣以夕陽美景及天然礁石聞名，區內包括了西子灣海水浴場、海濱公園、打狗英國領事館....等景點；可觀海景、遠眺高雄港；海水浴場極富熱帶氣息、南國風情，每當夜幕低垂，晚霞的照耀，漁船燈火閃爍其間，呈現海天一色美景。",
                                    "Description": "西子灣以夕陽美景及天然礁石聞名，區內包括了西子灣海水浴場、海濱公園、打狗英國領事館....等景點。",
                                    "Tel": "886-7-5250005",
                                    "Add": "高雄市804鼓山區蓮海路51號",
                                    "Zipcode": "804",
                                    "Travellinginfo": "搭高鐵至左營站下或搭臺鐵至高雄站下 → 轉搭高雄捷運至西子灣站下 → 轉搭高雄市公車(99路、橘1A路)至西子灣站下。",
                                    "Opentime": "西子灣海水浴場：10:00–16:00",
                                    "Gov": "397000000A",
                                    "Px": "120.26391",
                                    "Py": "22.62442"
                                }
                            ]
                        }
                    }
                },
                "id": "b69ffff9-23a5-44a6-a398-089b11a5f84c",
                "success": true
            };

            // 接 settings data
            let QD = [];

            for (let i = 0; i < 2; i++) {
                $.ajax({
                    url: "@Url.Action("OtherOne","Home")",
                    contentType: ContentType[i],
                    data: i == 0 ? TestData : JSON.stringify(TestData),
                    cache: false,
                    type: "POST",
                    beforeSend: function (SendDataBefore, settings) {
                        QD[i] = settings.data;
                    },
                    success: function (data) {
                        $(`#ReturnData${i}`).append(
                            `<h1>延伸1：高雄景點資訊 Data </h1>
                             <span>原始輸入資料：${JSON.stringify(TestData)}</span>
                             <span>輸入型別判斷：${typeof TestData}</span>
                             <h2>(Travelinfo TravelData)<h2>
                             <h3>送出內容：依據【 ${i == 0 ? "application/x-www-form-urlencoded" : "application / json"}】編碼</h3>
                             <div class="content col-lg-12">
                             <p id="FormatText">${i == 0 ? decodeURIComponent($.param(TestData)) : JSON.stringify(TestData)}</p>
                             </div>
                             <h3>${i == 0 ? "將 URL 編碼 ( URL encoding ) Decoded，並將 「&」轉為換行" : "JSON Beautify"}</h3>
                             <div class="content col-lg-12">
                             <pre id="TextDecode">${i == 0 ? decodeURIComponent($.param(TestData)).replace(/\&/g, '<br>') : JSON.stringify(TestData, null, 2)}</pre>
                             </div>
                             <h3>返回(Text)</h3>
                             <div class="content col-lg-12">
                             <p id="ReturnResult">${JSON.stringify(data).replace(/\{|\"|\}|\[|\]/g, "").replace(/\,/g, '<br>')}</p>
                             </div>`);
                    },
                    error: function (jqXHR, testStatus, errorThrown) {
                        alert(`Ajax 出錯`);
                        console.log("jqXHR 錯誤訊息內容:", jqXHR);
                        console.log("ErrorThrown 錯誤訊息內容:", errorThrown);
                    }
                });
            }
        });
        // 延伸題2
        $("#otherdataA").click(function () {
            // 測試資料
            let TestData = { "Name": "<div style=\"width:80%; background-color:orange; margin:2px auto; padding:2px 0px;\"><p style=\"color:white; text-align:center;\">Hello World</p></div>" };
            // 接 settings data
            let QD = [];
            for (let i = 0; i < 2; i++) {
                $.ajax({
                    url: "@Url.Action("OtherTwo","Home")",
                    contentType: ContentType[i],
                    data: i == 0 ? TestData : JSON.stringify(TestData),
                    beforeSend: function (SendDataBefore, settings) {
                        QD[i] = settings.data;
                    },
                    cache: false,
                    type: "POST",
                    success: function (data) {
                        $(`#ReturnHTML${i}`).append(
                            `<h1>延伸2：回傳 HTML </h1>
                             <span>原始輸入資料：${JSON.stringify(TestData)}</span>
                             <span>輸入型別判斷：${typeof TestData}</span>
                             <h2>(string Name)<h2>
                             <h3>送出內容：依據【 ${i == 0 ? "application/x-www-form-urlencoded" : "application / json"}】編碼</h3>
                             <div class="content col-lg-12">
                             <p id="FormatText">${i == 0 ? QD[i] : JSON.stringify(QD[i])}</p>
                             </div>
                             <h3>${i == 0 ? "將 URL 編碼 ( URL encoding ) Decoded" : "JSON Beautify"}</h3>
                             <div class="content col-lg-12">
                             <pre id="TextDecode">${i == 0 ? decodeURIComponent(QD[i]): JSON.stringify(QD[i])}</pre>
                             </div>
                             <h3>返回(Text)</h3>
                             <div class="content col-lg-12">
                             <p id="ReturnResult">${data}</p>
                             </div>`);
                    },
                    error: function (jqXHR, testStatus, errorThrown) {
                        alert(`Ajax 出錯`);
                        console.log("jqXHR 錯誤訊息內容:", jqXHR);
                        console.log("ErrorThrown 錯誤訊息內容:", errorThrown);
                    }
                });
                }
        });


        // 處理函式
        function AjaxtoQuery(Data) {
                // 後端要求的資料型別
                let RequestInfo = ["string Name, int Age", "Human Data", "string[] Name, int[] Age", "Human[] Data", " Person Data", "Person[] Data", "string Name, int Age", "Person[] Data"];

                // 丟給後端的 Action 名稱
                let ToAction = ["SimpleBinding", "ModelBindObj", "SimpleModelBindArray", "ModelBindingArray", "ModelBindingNestedObj", "ModelBindingArrayNestedObj", "SimpleBinding","ModelBindingArrayNestedObj"];

                // 用來作為 Ajax 查詢時的 url 變數
                let link = "@Url.Action("ActionName", "Home")";

                // 儲存 setting data 用
                let QSdata = [];

                // 序列化 String(改使用 jq.ajax(before)
                let QS = [$.param(Data[0]), $.param(Data[1]), $.param(Data[2], true), decodeURIComponent($.param(Data[3])), decodeURIComponent($.param(Data[4])), decodeURIComponent($.param(Data[5])), Data[6], decodeURIComponent(Data[7])];


                for (let i = 0; i < ToAction.length; i++) {

                    // 如果是字串，轉換後用一個物件接它
                    let result = {};

                    // 判別字串或物件
                    typeof QS[i] == "Object" ? "" : result = QueryStringTransferA(QS[i]);

                    for (let j = 0; j < ContentType.length; j++) {
                        $.ajax({
                            // 替換處理的 Action
                            url: link.replace("ActionName", ToAction[i]),
                            contentType: ContentType[j],

                            // 0 為 application/x-www-form-urlencoded , 1 為 application/json; charset=utf-8
                            data: j == 0 ? Data[i] : JSON.stringify(typeof Data[i] == "object" ? Data[i] : result),

                            // 執行查詢前，先抓原始的 querystring
                            beforeSend: j == 0 ? function (SendDataBefore, settings) {
                                QSdata[i] = settings.data;
                            } : "",
                            cache: false,
                            type: "POST",
                            success: function (data) {
                                $(`#ReturnContent${i}`).append(
                                    `<span>原始輸入資料：${JSON.stringify(Data[i])}</span>
                                     <span>輸入型別判斷：${typeof Data[i]}</span>
                                     <h2>(${RequestInfo[i]})<h2>
                                     <h3>送出內容：依據【 ${j == 0 ? "application/x-www-form-urlencoded" : "application / json"}】編碼</h3>
                                     <div class="content col-lg-12">
                                      <p id="FormatText">${j == 0 ? QSdata[i] : JSON.stringify(typeof Data[i] == "object" ? Data[i] : result)}</p>
                                     </div>
                                     <h3>${j == 0 ? "將 URL 編碼 ( URL encoding ) Decoded，並將 「&」轉為換行" : "JSON Beautify"}</h3>
                                    <div class="content col-lg-12">
                                        <pre id="TextDecode">${j == 0 ? QS[i].replace(/\&/g, '<br>') : JSON.stringify(typeof Data[i] == "object" ? Data[i] : result, null, 2)}</pre>
                                    </div>
                                    <h3>返回(Text)</h3>
                                    <div class="content col-lg-12">
                                        <p id="ReturnResult">${i < 2 ? JSON.stringify(data).replace(/\{|\"|}/g, "") : JSON.stringify(data).replace(/\{|\"|\}|\[|\]/g, "").replace(/\,/g, " | ")}</p>
                                    </div>`);
                            },
                            error: function (jqXHR, testStatus, errorThrown) {
                                alert(`位置${i} 的 Ajax 出錯`);
                                console.log("jqXHR 錯誤訊息內容:", jqXHR);
                                console.log("ErrorThrown 錯誤訊息內容:", errorThrown);
                            }
                        });
                    }
                }
        };


        // Convert QueryString to object
        function QueryStringTransferA(QueryTransferData) {

                // 使用 URLSearchParam 抓出 QueryString
                let SearchPar = new URLSearchParams(QueryTransferData);

                // entries():展開所有 QueryString
                return [...SearchPar.entries()].reduce((acc, tuple) => {
                    let [key, value] = tuple;
                    if (acc.hasOwnProperty(key)) {
                        if (Array.isArray(acc[key])) {
                            console.log("有");
                            acc[key] = [...acc[key], value];
                        }
                        else {
                            acc[key] = [acc[key], value];
                        }
                    }
                    else {

                        acc[key] = value;
                    }
                    return acc;
                    // 初始為物件
                }, {});
        };

    </script>
}