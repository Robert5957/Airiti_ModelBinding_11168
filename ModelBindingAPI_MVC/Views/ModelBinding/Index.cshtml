<style>
    table {
        width:100%;
        table-layout: fixed;
        overflow: scroll;
    }
    td {
        overflow-wrap: break-word;
        margin: 0;
        padding: 0;
    }
</style>
<div class=" form-inline" id="allcontent">
    <div class="form-group form-group-lg">
        <label for="dataBinding">資料繫結方式</label>
        <br />
        @Html.DropDownList("dataBinding", new List<SelectListItem>() {
                    new SelectListItem(){ Value = "SimpleBinding", Text = "SimpleBinding"},
                    new SelectListItem(){ Value = "ModelBindObj", Text = "ModelBindObj" },
                    new SelectListItem(){ Value = "SimpleModelBindArray", Text = "SimpleModelBindArray" },
                    new SelectListItem(){ Value = "ModelBindingArray", Text = "ModelBindingArray" },
                    new SelectListItem(){ Value = "ModelBindingNestedObj", Text = "ModelBindingNestedObj" },
                    new SelectListItem(){ Value = "ModelBindingArrayNestedObj", Text = "ModelBindingArrayNestedObj" }
                })
    </div>
    <div class="form-group form-group-lg">
        <label for="contentType">內容類型</label>
        <br />
        @Html.DropDownList("contentType", new List<SelectListItem>() {
                    new SelectListItem(){ Value = "application/x-www-form-urlencoded", Text = "application/x-www-form-urlencoded"},
                    new SelectListItem(){ Value = "application/json", Text = "application/json" }
                })
    </div>
    <div class="form-group form-group-lg">
        <label for=""></label>
        <br /><button id="btnSubmit" class="btn btn-primary">送出</button>
    </div>
</div>
<table class="table" id="tableMain">
    <thead class="thead-dark">
        <tr>
            <th scope="col" width="4%">序號</th>
            <th scope="col" width="8%"> 資料型態</th>
            <th scope="col" width="28%">輸入內容</th>
            <th scope="col" width="10%">內容類型</th>
            <th scope="col" width="30%">送出內容</th>
            @*<th scope="col">URL編碼</th>*@
            <th scope="col" width="20%">傳回內容</th>
        </tr>
    </thead>
</table>
@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.10.3/beautify.js"></script>

    <script>
        $('#btnSubmit').click(() => {
/*            $('table tbody').empty();*/
            modelBinding();
        });
        function jqdata(name, age, friends = null) {
            this.name = name
            this.age = age
            this.Friends = friends || null
        }
        function factory(action) {
            let obj =
            {
                tag: action.tag,
                url: action.url,
                dataType: action.dataType,
                id: 1,
                contentType: action.contentType,
                ajax: (data, status) => {
                    Ajax(obj, data, status);
                }
            };
            return obj;
        };
        function Ajax(obj, inputData) {
            let sendData, Alerts,
                inputType = typeof (inputData);
            switch (obj.contentType) {
                case "application/x-www-form-urlencoded":
                    sendData = inputData;
                    break;
                case "application/json":
                    if (inputType == "object")
                        sendData = JSON.stringify(inputData);
                    break;
            }
            $.ajax({
                url: obj.url,
                method: obj.method ? obj.method : 'POST',
                contentType: obj.contentType + "; charset=UTF-8",
                data: sendData,
                dataType: obj.dataType,
                processData: true,
                async: false,
                beforeSend: function (jqXHR, settings) {
                    let dataTxt = "";
                    switch (inputType) {
                        case "object":
                            dataTxt = js_beautify(JSON.stringify(inputData));
                            break;
                        case "string":
                            dataTxt = inputData;
                            break;
                    }
                    Alerts = ' <tbody>' +
                        '<tr>' +
                        '  <td>' + obj.id + '</td>' +
                        '  <td>' + obj.tag + '</td>' +
                        '   <td>' + dataTxt + '</td>' +
                        '   <td>' + obj.contentType + '</td>' +
                        '   <td>' + settings.data + '</td>';
                },
                success: function (result, textStatus, jqXHR) {
                    if (jqXHR.responseText == "") {
                        $('#tableMain').append(Alerts.replace("※status※", 'danger') + '<td>' + 'Fail' + '</td>');
                    } else {
                        switch (typeof (result)) {
                            case "object":
                                result = js_beautify(JSON.stringify(result));
                                break;
                            case "string":
                                break;
                        }
                        $('#tableMain').append(Alerts.replace("※status※", 'success') + '<td>' + result + '</td>');}

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    $('#tableMain').append(Alerts.replace("※status※", 'danger') + '<td>' + 'error' + '</td>');
                    console.log("error!");
                },
                complete: function () {
                    obj.id++;
                }
            });
        }
        function modelBinding() {

            var actionName = document.getElementById("dataBinding").value;
            var appUrlencoded = document.getElementById('contentType').value;
            var variables =
            {
                SimpleBinding: [{ Name: "Gina", Age: 11 }/*物件*/, 'Name=Gina&Age=12', new jqdata("Gina", 13)]
                , ModelBindObj: [{ Name: "Gina", Age: 21 }, { data: { Name: "Gina", Age: 22 } }, { data: new jqdata('Gina', 23) }, new jqdata('Gina', 24)]
                , SimpleModelBindArray: [{ Name: ["Gina", "Tom"], Age: [31, 1] }, new jqdata(["Gina", "Tom"], [32, 2]), { "Name[0]": "Gina", "Age[0]": 33, "Name[1]": "Tom", "Age[1]": 3 }]
                , ModelBindingArray: [{ data: [{ Name: "Gina", Age: 41 }, { Name: "Tom", Age: 1 }] }, [{ Name: "Gina", Age: 42 }, { Name: "Tom", Age: 1 }], { data: [new jqdata("Gina", 43), new jqdata("Tom", 1)] }, [new jqdata("Gina", 43), new jqdata("Tom", 1)], { "data[0]": { Name: "Gina", Age: 44 }, "data[1]": { Name: "Tom", Age: 2 } }, { "[0]": { Name: "Gina", Age: 45 }, "[1]": { Name: "Tom", Age: 2 } }]
                , ModelBindingNestedObj: [{ data: { Name: "Gina", Age: 51, Friends: [{ Name: "Nana", Age: 0, Friends: [{ Name: "Ivy", Age: 3 }] }] } }, { Name: "Gina", Age: 52, Friends: [{ Name: "Nana", Age: 0, Friends: [{ Name: "Ivy", Age: 3 }] }] }, { data: new jqdata('Gina', 53, [new jqdata('Tina', 20, null)]) }, new jqdata('Gina', 54, [new jqdata('Tina', 20, null)])]
                , ModelBindingArrayNestedObj: [
                    { data: [{ Name: "Gina", Age: 61, Friends: [{ Name: "Nana", Age: 0, Friends: [{ Name: "Ivy", Age: 3 }] }] }, { Name: "Fanny", Age: 5, Friends: [{ Name: "Tina", Age: 0, Friends: [{ Name: "Chris", Age: 3 }] }] }] }
                    , [{ Name: "Gina", Age: 62, Friends: [{ Name: "Nana", Age: 0, Friends: [{ Name: "Ivy", Age: 3 }] }] }, { Name: "Fanny", Age: 5, Friends: [{ Name: "Tina", Age: 0, Friends: [{ Name: "Chris", Age: 3 }] }] }]
                    , { data: [new jqdata('Gina', 63, [new jqdata('Ivy', 2)]), new jqdata('Fanny', 23, [new jqdata('Eva', 2)])] }
                    , [new jqdata('Gina', 64, [new jqdata('Ivy', 2)]), new jqdata('Fanny', 23, [new jqdata('Eva', 2)])]
                    , { "data[0]": { Name: "Gina", Age: 65, Friends: [{ Name: "Nana", Age: 0, Friends: [{ Name: "Ivy", Age: 3 }] }] }, "data[1]": { Name: "Fanny", Age: 5, Friends: [{ Name: "Tina", Age: 0, Friends: [{ Name: "Chris", Age: 3 }] }] } }
                    , { "[0]": { Name: "Gina", Age: 66, Friends: [{ Name: "Nana", Age: 0, Friends: [{ Name: "Ivy", Age: 3 }] }] }, "[1]": { Name: "Fanny", Age: 5, Friends: [{ Name: "Tina", Age: 0, Friends: [{ Name: "Chris", Age: 3 }] }] } }
                ]

            }
            let actionStyle;
            switch (actionName) {
                case "SimpleBinding":
                    actionStyle = "string Name, int Age";
                    break;
                case "ModelBindObj":
                    actionStyle = "Human data";
                    break;
                case "SimpleModelBindArray":
                    actionStyle = "string[] Name, int[] Age";
                    break;
                case "ModelBindingArray":
                    actionStyle = "Human[] data";
                    break;
                case "ModelBindingNestedObj":
                    actionStyle = "Person data";
                    break;
                case "ModelBindingArrayNestedObj":
                    actionStyle = "Person[] data";
                    break;
            }
            let action_modelBinding = { tag: actionStyle, url: "/ModelBinding/" + actionName, dataType: "text", contentType: appUrlencoded };
            for (var actionname in variables) {
                if (variables.hasOwnProperty(actionname)) {
                    if (actionname == actionName) {
                        let modelBinding = factory(action_modelBinding);
                        variables[actionname].forEach((object) => {
                            modelBinding.ajax(object);
                        })
                    }

                }
            }/* $('#tableMain').append('<td >End</td>');*/
        }

    </script>
}


